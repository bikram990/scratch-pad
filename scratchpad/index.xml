<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scratch Pad on Useful commands compiled by bikram990</title><link>/scratchpad/</link><description>Recent content in Scratch Pad on Useful commands compiled by bikram990</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/scratchpad/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible</title><link>/scratchpad/ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/ansible/</guid><description>Install requirements ansible-galaxy collection install --requirements-file requirements.yaml ansible-galaxy roles install --requirements-file requirements.yaml Ping All Nodes ansible all -m ping A group of Nodes ansible &amp;lt;group name&amp;gt; -m ping Run A Playbook ansible-playbook &amp;lt;path to playbook&amp;gt;.yml Playbook with SOPS encrypted secrets SOPS_AGE_KEY_FILE=&amp;lt;path to age key file&amp;gt; ansible-playbook &amp;lt;path to playbook&amp;gt;.yml Secrets Create a Secret age-keygen &amp;gt; &amp;lt;path to age key file&amp;gt; Sample # created: 2022-02-11T09:41:54+05:30 # public key: age1pqa839xsu7rgdmghchjgexue7fpa985fskpdqr4yq84xc4r0zuysk855k9 AGE-SECRET-KEY-17KP5RAUU7PE00X2CGLXJ63DSZLTC4E3YP6L7CQT0M72PS60QDN6QU4RVK6 Create/View a sops encrypted file SOPS_AGE_KEY_FILE=&amp;lt;path to age key file&amp;gt; sops --age &amp;lt;public age key&amp;gt; &amp;lt;path to secrets&amp;gt;.</description></item><item><title>cURL</title><link>/scratchpad/curl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/curl/</guid><description>Use DNS over https with cURL curl --doh-url https://dns.google/dns-query https://api.ipify.org Note The above command will override the DNS server while quering api.ipify.org, but it will still use your system DNS to query for dns.google
You can view list of DNS servers here.
Use curl to telnet to another machine curl telnet://&amp;lt;ip address or hostname&amp;gt;:&amp;lt;port&amp;gt;</description></item><item><title>Database</title><link>/scratchpad/database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/database/</guid><description>MariaDB Connect mysql --host=&amp;lt;hostname&amp;gt; --user=&amp;lt;username&amp;gt; --password=&amp;lt;password&amp;gt; &amp;lt;database name&amp;gt; # or mysql -h &amp;lt;hostname&amp;gt; -u &amp;lt;username&amp;gt; -p&amp;lt;passowrd&amp;gt; &amp;lt;database name&amp;gt; Note -p&amp;lt;passowrd&amp;gt; is intentional, there should not be any space in -p and your password
Show all the tables in a database SHOW TABLES; Show columns from a table SHOW COLUMNS FROM &amp;lt;table name&amp;gt;; Run a script mysql -h &amp;lt;hostname&amp;gt; -u &amp;lt;user&amp;gt; -p &amp;lt; /path/to/myscript.sql Slow running queries log file SHOW GLOBAL VARIABLES LIKE &amp;#39;slow%log%&amp;#39;; Show Open Connections and processes SHOW PROCESSLIST; Check if error logs are enabled SHOW GLOBAL VARIABLES LIKE &amp;#39;log_error&amp;#39;; Show slow running queries SELECT * FROM mysql.</description></item><item><title>Git</title><link>/scratchpad/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/git/</guid><description>Create a new repository cd &amp;lt;pathToFolder&amp;gt; git init Cloning and getting remote changes Clone a repository git clone &amp;lt;gitRepositoryURL&amp;gt; Clone a repository with limited history git clone --depth n &amp;lt;gitRepositoryURL&amp;gt; Info where n is the number of revisions you want in the history
Clone specific branch git clone -b &amp;lt;branchName&amp;gt; --single-branch &amp;lt;gitRepositoryURL&amp;gt; Clone with all submodules git clone &amp;lt;gitRepositoryURL&amp;gt; --recursive Pull remote changes git pull Pull remote changes without generating a merge commit git pull --rebase Discarding changes Discard changes to a file git checkout &amp;lt;filePath&amp;gt; Warning You will loose all the changes to that file</description></item><item><title>Gradle</title><link>/scratchpad/gradle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/gradle/</guid><description>Log test events test { testLogging { events &amp;#34;PASSED&amp;#34;, &amp;#34;SKIPPED&amp;#34;, &amp;#34;FAILED&amp;#34;, &amp;#34;STANDARD_OUT&amp;#34;, &amp;#34;STANDARD_ERROR&amp;#34; } } Build a subproject from root level ./gradlew :&amp;lt;project name 1&amp;gt;:&amp;lt;action 1&amp;gt; :&amp;lt;project name 2&amp;gt;:&amp;lt;action 2&amp;gt;</description></item><item><title>Hugo</title><link>/scratchpad/hugo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/hugo/</guid><description>Create Create a new site hugo new site &amp;lt;site name&amp;gt; Info Above command will create a new folder with given site name and all of the directory hierarchy will be created there
Create a theme hugo new theme &amp;lt;theme name&amp;gt; Create a page from template hugo new --kind &amp;lt;template name stored in archetypes&amp;gt; &amp;lt;where to create under content dir&amp;gt; Example for directory structure is like following - archetypes - _default.md - first_template.</description></item><item><title>Java/Spring</title><link>/scratchpad/spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/spring/</guid><description> @RequestParam Object binding
To enable details in health API
management.endpoint.health.show-details=always To switch profile
Via command line
--spring.profiles.active=dev Via environment variable
spring_profiles_active=dev Java heap dump
sudo su &amp;lt;user running the java process&amp;gt; jmap -dump:live,format=b,file=/tmp/&amp;lt;file&amp;gt;.hprof &amp;lt;pid&amp;gt; Get Mime Type in Java
https://www.baeldung.com/java-file-mime-type</description></item><item><title>Keytool</title><link>/scratchpad/keytool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/keytool/</guid><description>List List all items from a keystore keytool -list -noprompt -storepass &amp;lt;keystore password&amp;gt; -keystore &amp;lt;path to keystore&amp;gt; Example Example keytool -list -noprompt -storepass &amp;#39;changeit&amp;#39; -keystore &amp;#39;/etc/pki/java/cacerts&amp;#39; List a particular item from a keystore keytool -list -noprompt -alias &amp;lt;alias of the item&amp;gt; -storepass &amp;lt;keystore password&amp;gt; -keystore &amp;lt;path to keystore&amp;gt; Example Example keytool -list -noprompt -alias &amp;#39;globalsignrootr46&amp;#39; -storepass &amp;#39;changeit&amp;#39; -keystore &amp;#39;/etc/pki/java/cacerts&amp;#39; -v Import Import a trust certificate keytool -import -trustcacerts -keystore &amp;lt;path to keystore&amp;gt; -storepass &amp;lt;keystore password&amp;gt; -noprompt -alias &amp;lt;alias for item&amp;gt; -file &amp;lt;certificate file&amp;gt; Example Example keytool -import -trustcacerts -keystore &amp;#39;/etc/pki/java/cacerts&amp;#39; -storepass &amp;#39;changeit&amp;#39; -noprompt -alias &amp;#39;mycert&amp;#39; -file &amp;#39;cert.</description></item><item><title>NPM</title><link>/scratchpad/npm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/npm/</guid><description>NPM Build a project and serve it npm serve Add and Install a NPM package npm install --save &amp;lt;package name&amp;gt; NVM Install nvm Follow instructions given here
Install a npm version nvm install v10.24.1 Use a npm version nvm use 15.14.0 Yarn Install project dependencies yarn install Build yarn build Serve NPM project yarn serve Serve NPM project at specific port PORT=&amp;lt;port number&amp;gt; yarn serve Axios Print request &amp;amp; response on browser console Add Axios debug package</description></item><item><title>Openssl</title><link>/scratchpad/openssl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/openssl/</guid><description>Fetch Server SSL certificate We need to trust a SSL certificate before we can communicate with a SSL server. To download the SSL certificate we can use following command:
openssl s_client -showcerts -servername &amp;lt;server hostname&amp;gt; -connect &amp;lt;server hostname&amp;gt;:443 &amp;lt;/dev/null Example Example
openssl s_client -showcerts -servername &amp;#39;google.com&amp;#39; -connect &amp;#39;google.com:443&amp;#39; &amp;lt;/dev/null Create Self Signed Root CA Certificate Create key pair for creating certificate
openssl genrsa -des3 -out &amp;lt;key file&amp;gt;.key 2048 # or openssl ecparam -out &amp;lt;key file&amp;gt;.</description></item><item><title>SSH</title><link>/scratchpad/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/ssh/</guid><description>Generate SSh key ssh-keygen -t &amp;lt;type&amp;gt; -C &amp;lt;comment&amp;gt; Example ssh-keygen -t ed25519 -C &amp;#34;john@users.noreply.github.com&amp;#34; # or ssh-keygen -t rsa -C &amp;#34;My key name&amp;#34; Copy my public key ssh-copy-id -i &amp;lt;path to key file&amp;gt; &amp;lt;user&amp;gt;@&amp;lt;hostname or ip&amp;gt; Example ssh-copy-id -i ~/.ssh/id_rsa john@10.10.10.1 # or ssh-copy-id -i ~/.ssh/id_rsa john@mydomainname.tld Login ssh &amp;lt;user&amp;gt;@&amp;lt;hostname or ip&amp;gt; Example ssh john@10.10.10.1 # or ssh john@mydomainname.tld</description></item><item><title>System Setup</title><link>/scratchpad/systemsetup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/systemsetup/</guid><description>Show Hidden files on macOS defaults write com.apple.Finder AppleShowAllFiles true killall Finder</description></item><item><title>Miscellaneous</title><link>/scratchpad/miscellaneous/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scratchpad/miscellaneous/</guid><description>Monitor ipv4 address for a hostname using macOS DNS resolver dns-sd -G v4 &amp;lt;hostname&amp;gt; Ping a host given number of times ping -c &amp;lt;number&amp;gt; &amp;lt;hostname&amp;gt; Query IP address of a hostname nslookup &amp;lt;hostname&amp;gt; Query IP address of a hostname from a specific DNS server nslookup &amp;lt;hostname&amp;gt; &amp;lt;dns server address&amp;gt; Example nslookup google.com 8.8.8.8 Query specific field from DNS server nslookup -query=&amp;lt;field name&amp;gt; &amp;lt;hostname&amp;gt; Example nslookup -query=cname google.com 8.8.8.8 Find open ports Linux netstat -plant macOS Using netstat</description></item></channel></rss>