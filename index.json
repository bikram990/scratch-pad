[{"content":"Install requirements ansible-galaxy collection install --requirements-file requirements.yaml ansible-galaxy roles install --requirements-file requirements.yaml Ping All Nodes ansible all -m ping A group of Nodes ansible \u003cgroup name\u003e -m ping Run A Playbook ansible-playbook \u003cpath to playbook\u003e.yml Playbook with SOPS encrypted secrets SOPS_AGE_KEY_FILE=\u003cpath to age key file\u003e ansible-playbook \u003cpath to playbook\u003e.yml Secrets Create a Secret age-keygen \u003e \u003cpath to age key file\u003e Sample # created: 2022-02-11T09:41:54+05:30 # public key: age1pqa839xsu7rgdmghchjgexue7fpa985fskpdqr4yq84xc4r0zuysk855k9 AGE-SECRET-KEY-17KP5RAUU7PE00X2CGLXJ63DSZLTC4E3YP6L7CQT0M72PS60QDN6QU4RVK6 Create/View a sops encrypted file SOPS_AGE_KEY_FILE=\u003cpath to age key file\u003e sops --age \u003cpublic age key\u003e \u003cpath to secrets\u003e.sops.yml Roles Create a Role ansible-galaxy init \u003crole name\u003e ","description":"Useful ansible commands","tags":["ansible","ansible-galaxy","ansible-playbook","sops"],"title":"Ansible","uri":"/scratchpad/ansible/"},{"content":"Use DNS over https with cURL curl --doh-url https://dns.google/dns-query https://api.ipify.org Note The above command will override the DNS server while quering api.ipify.org, but it will still use your system DNS to query for dns.google\nYou can view list of DNS servers here.\nUse curl to telnet to another machine curl telnet://\u003cip address or hostname\u003e:\u003cport\u003e ","description":"Useful cURL commands","tags":["curl","doh"],"title":"cURL","uri":"/scratchpad/curl/"},{"content":"MariaDB Connect mysql --host=\u003chostname\u003e --user=\u003cusername\u003e --password=\u003cpassword\u003e \u003cdatabase name\u003e # or mysql -h \u003chostname\u003e -u \u003cusername\u003e -p\u003cpassowrd\u003e \u003cdatabase name\u003e Note -p\u003cpassowrd\u003e is intentional, there should not be any space in -p and your password\nShow all the tables in a database SHOW TABLES; Show columns from a table SHOW COLUMNS FROM \u003ctable name\u003e; Run a script mysql -h \u003chostname\u003e -u \u003cuser\u003e -p \u003c /path/to/myscript.sql Slow running queries log file SHOW GLOBAL VARIABLES LIKE 'slow%log%'; Show Open Connections and processes SHOW PROCESSLIST; Check if error logs are enabled SHOW GLOBAL VARIABLES LIKE 'log_error'; Show slow running queries SELECT * FROM mysql.slow_log\\G; Show threshold time for slow running queries SHOW GLOBAL VARIABLES LIKE 'long_query_time'; Show where slow running queries are logged -- FILE means it will go to file SHOW GLOBAL VARIABLES LIKE 'log_output'; Set Id of last insert into variable SET @variable_name = LAST_INSERT_ID(); Set a value into variable from select SELECT ID INTO @variable_name FROM `DATABASE`.`TABLE` WHERE NAME = \"test\"; MongoDB Connect mongo -u \u003cuser\u003e -p \u003cpassword\u003e localhost:9005/admin // or mongo --host localhost --port 9005 -u \u003cuser\u003e -p --authenticationDatabase \u003cauthentication db\u003e Check this for more flavors\nDatabase Create use \u003cdatabase name\u003e; db.createCollection(\"mycollection\") Note use command will either create a DB or switch to the DB. DB creation is saved/visible only after a collection is created.\nShow existing Databases show dbs; Change/Switch selected Database use \u003cdatabase name\u003e; Note use command will either create a DB or switch to the DB.\nTo show all the collections in selected Database show collections; Users Show users in a DB use \u003cdatabase\u003e; db.getUsers(); Show all system users use admin; db.system.users.find(); Create User in specific db db.createUser({ user: \"\u003cusername\u003e\", pwd: \"\u003cpassword\u003e\", roles: [ {role: \"readWrite\", db: \"\u003cauth db name\u003e\"} ] }); Delete a user in specific db use \u003cdatabase\u003e; db.dropUser(\"\u003cusername\u003e\"); Filter documents Based on a field’s exists use \u003cdatabase\u003e; db.getCollection('\u003ccollection name\u003e').find({\u003cfield name\u003e: { $exists: \u003cshould exist\u003e }}); Based on regex use \u003cdatabase\u003e; db.getCollection('\u003ccollection name\u003e').find({\u003cfield name\u003e: { $regex: \"\u003cmy regex\u003e\" }}); Based on equality use \u003cdatabase\u003e; db.getCollection('\u003ccollection name\u003e').find({\u003cfield name\u003e: { $eq: \"\u003cmy exp\u003e\" }}); // or db.getCollection('\u003ccollection name\u003e').find({\u003cfield name\u003e: \"\u003cmy exp\u003e\" }); // Greater than db.getCollection('\u003ccollection name\u003e').find({\u003cfield name\u003e: { $gt: \"\u003cmy exp\u003e\" }}); //Less than db.getCollection('\u003ccollection name\u003e').find({\u003cfield name\u003e: { $lt: \"\u003cmy exp\u003e\" }}); // Greater than equal to db.getCollection('\u003ccollection name\u003e').find({\u003cfield name\u003e : {$gte : new Date(new Date() - 30 * 60 * 60 * 24 * 1000)}}); Distinct db.getCollection('\u003ccollection name\u003e').distinct(\"\u003cfield\u003e\", {\u003cquery\u003e}); Undefined db.getCollection(\"\u003ccollection name\u003e\").find({\u003cfield\u003e: {$type: 'undefined'}}); Arrays // checks size equals db.getCollection(\"\u003ccollection name\u003e\").find({\"\u003cfield\u003e\" : {$size: 1}}); // doesn't work db.getCollection(\"\u003ccollection name\u003e\").find({\"\u003cfield\u003e\" : {$where:`this.\u003cfield\u003e.length \u003e= 1`}}); // works and checks if an element exists at index 1 db.getCollection(\"\u003ccollection name\u003e\").find({\"\u003cfield\u003e.1\" : {$exists: true}}); Key inside an object db.getCollection(\"\u003ccollection name\u003e\").find({\"\u003cfield\u003e.\u003ckey\u003e\": \"\u003cmy exp\u003e\"}).limit(1); ","description":"Useful Database commands","tags":["mariadb","mysql","mongo"],"title":"Database","uri":"/scratchpad/database/"},{"content":"Create a new repository cd \u003cpathToFolder\u003e git init Cloning and getting remote changes Clone a repository git clone \u003cgitRepositoryURL\u003e Clone a repository with limited history git clone --depth n \u003cgitRepositoryURL\u003e Info where n is the number of revisions you want in the history\nClone specific branch git clone -b \u003cbranchName\u003e --single-branch \u003cgitRepositoryURL\u003e Clone with all submodules git clone \u003cgitRepositoryURL\u003e --recursive Pull remote changes git pull Pull remote changes without generating a merge commit git pull --rebase Discarding changes Discard changes to a file git checkout \u003cfilePath\u003e Warning You will loose all the changes to that file\nDiscard some commit git reset --hard HEAD~n Note where n is number of last commits which you want to discard\nWarning You will loose all the changes\nTags List all tags git tag -l Create a local tag git tag \u003ctagName\u003e Create a remote tag git tag \u003ctagName\u003e git push origin \u003ctagName\u003e Push all local tags to remote git push origin --tags Delete a tag git tag --delete \u003ctagName\u003e Branches List all branches git branch -a List all remote branches git branch -r List all local branches git branch -l Switch to a branch git checkout \u003cbranchName\u003e Note If there is a tag with same name as the branch then this command will checkout the tag and will not track it\nCheckout remote branch with a different local name git branch -f --track \u003clocalBranchName\u003e origin/\u003cremoteBranchName\u003e Create a local branch git checkout -b \u003cnewBranchName\u003e Create a local branch and push it to remote git checkout -b \u003cnewBranchName\u003e git branch --edit-description git push origin \u003cnewBranchName\u003e Info –edit-description is optional and for editing the commit message for the branch creation\nCreate a local branch from a specific commit git checkout \u003ccommitHash\u003e git branch -b \u003cnewBranchName\u003e git push origin \u003cnewBranchName\u003e Create a local branch and track remote changes git checkout -b \u003cnewBranchName\u003e git push --set-upstream origin \u003cremoteBranchName\u003e Rename a local branch git branch -m \u003coldName\u003e \u003cnewName\u003e git branch -m \u003cnewName\u003e #rename current local branch Rename remote branch git branch -m \u003coldName\u003e \u003cnewName\u003e #rename locally git push origin :\u003cremoteBranchName\u003e #delete the branch from remote git push origin \u003cnewLocalName\u003e #push the local branch to remote Delete a local branch git branch -d \u003cbranchName\u003e # or git branch -D \u003cbranchName\u003e Note -D is forceful deletion of branch\nDelete a remote branch git push origin --delete \u003cbranchName\u003e # or git push origin :\u003cbranchName\u003e Commit and Push List staged files git status View diff of a modified file git diff \u003cfile\u003e View diff of a staged file git diff --cached \u003cfile\u003e Commit changes git add \u003cchangedFiles\u003e git commit -m \u003ccommitMessage\u003e # Check for best practice on commit message https://www.conventionalcommits.org/en/v1.0.0/ Push local commits to remote git push Change commit message git commit --amend #or git rebase -i HEAD~n Info where n is number of last commits which you want to rebase\nThe above command will open a editor and will give various rebase options use reword option to select the commits whose commit message you want to change. After selecting the commits close the file. git will open all the commits one by one to allow rewording the commit message. View changes in commit git show \u003ccommit hash\u003e Info You can get the commit hash from git log command\nUndo last commit git reset --soft HEAD~n Info where n is number of last commits which you want to undo\nCherry Pick a commit from other branch git checkout \u003cbranch to apply the commit\u003e git cherry-pick \u003ccommit hash\u003e Info You can get the commit hash from git log command\nMerge Merge without committing git merge --no-commit --no-ff \u003cbranchNameFromWhereYouWantToTakeChanges\u003e Handling merge conflicts git checkout --ours \u003cfilePath\u003e git checkout --theirs \u003cfilePath\u003e Tip If you want to merge both the changes then change the file and add the file to the commit using git add\nAbort a merge git merge --abort List all the commits in a merge git log \u003cMergeCommitHash\u003e^..\u003cMergeCommitHash\u003e --pretty=format:\"%aD %H %ae %s\" Revert Revert a specific commit git revert -m 1 \u003ccommitHash\u003e Info 1 indicates that you want to go to first ancestor of this commit\nRemove a big file from a specific commit pushed to remote git rebase -i \u003ccommitHash - 1\u003e git rm --cached \u003cPath to bigFile\u003e git commit --amend -C HEAD git rebase --continue git push --force Note Provide the commit hash of one commit before the commit which has the big file git will open editor, change pick to edit for the wrong commit which has the big file Close the editor Stash Stash local uncommitted changes git stash Info All the files added to a commit will be un-staged and put in stash\nList all stashes git stash list Apply stashed changes git stash pop Info This will apply the stash and delete the stash changes\nApply stashed changes to multiple branches git stash apply git checkout \u003cbranchName\u003e git stash apply git stash drop Note Last step will delete the stash\nView diff from stash without applying git stash show -p stash@{n} Info where n is the stash number you want to view, to get the stash number use git stash list command\nCommit Logs Show all commit logs git log Show all of your commits git log --author='Your Name' # or git log --author='you@somedomain.com' Show all unpushed commits git log --branches --not --remotes Note The above command will list all the unpushed commits in all branches\nShow all commits which are present in one branch and not in other git log \u003cbranch\u003e --not \u003cbranchToCheckAgainst\u003e --reverse --author=\"user@yourdomain.com\" --pretty=format:\"%aD %H %ae %s\" GIT miscellaneous Add a submodule cd \u003cpath where you want to add submodule\u003e git submodule add \u003cURL\u003e See info git remote show origin Change origin URL git remote set-url origin \u003cURL\u003e Update user details git config --global user.name 'Your Name' git config --global user.email 'you@somedomain.com' Udate user details for a repo git config user.name 'Your Name' git config user.email 'you@somedomain.com' Add a file to a commit git add \u003cfilePath\u003e Un-stage a file (remove a file from the commit) git reset HEAD \u003cfilePath\u003e # or git rm --cached \u003cfilePath\u003e Un-stage all files (remove all files from the commit) git reset HEAD -- Delete a file git rm \u003cfilePath\u003e git rm -f \u003cfilePath\u003e Note -f is for forcefully deleting the file\nDelete untracked files # Dry run git clean -d -n # Delete git clean -d -f Delete untracked and ignored files # Dry run git clean -d -n -x # Delete git clean -d -f -x Change email id in already commited commits git filter-branch --env-filter ' WRONG_EMAIL=\"\u003cwronguser@wrongdomain.com\u003e\" NEW_NAME=\"Your Name\" NEW_EMAIL=\"correctuser@correctdomain.com\" if [ \"$GIT_COMMITTER_EMAIL\" = \"$WRONG_EMAIL\" ] then export GIT_COMMITTER_NAME=\"$NEW_NAME\" export GIT_COMMITTER_EMAIL=\"$NEW_EMAIL\" fi if [ \"$GIT_AUTHOR_EMAIL\" = \"$WRONG_EMAIL\" ] then export GIT_AUTHOR_NAME=\"$NEW_NAME\" export GIT_AUTHOR_EMAIL=\"$NEW_EMAIL\" fi ' --tag-name-filter cat -- --branches --tags Setup auto push/tracking to current branch git config --global --add --bool push.autoSetupRemote true ","description":"Useful git commands","tags":["git"],"title":"Git","uri":"/scratchpad/git/"},{"content":"Log test events test { testLogging { events \"PASSED\", \"SKIPPED\", \"FAILED\", \"STANDARD_OUT\", \"STANDARD_ERROR\" } } Build a subproject from root level ./gradlew :\u003cproject name 1\u003e:\u003caction 1\u003e :\u003cproject name 2\u003e:\u003caction 2\u003e ","description":"Useful gradle commands","tags":["gradle"],"title":"Gradle","uri":"/scratchpad/gradle/"},{"content":" Introduction Scratch Pad ","description":"","tags":null,"title":"Home","uri":"/"},{"content":"Create Create a new site hugo new site \u003csite name\u003e Info Above command will create a new folder with given site name and all of the directory hierarchy will be created there\nCreate a theme hugo new theme \u003ctheme name\u003e Create a page from template hugo new --kind \u003ctemplate name stored in archetypes\u003e \u003cwhere to create under content dir\u003e Example for directory structure is like following - archetypes - _default.md - first_template.md - second_template.md - group_template - _index.md - third_template.md - content - posts - index.md - first - blogs - index.md - ... use hugo new --kind group_template posts/second to create all the subtemplates under new post second use hugo new --kind first_template blogs/first to create first.md under blogs use hugo new --kind chapter intro to create a new chapter under content, chapter is a special kind and it will use _default.md as bas template if available Serve hugo serve # or hugo serve --port 8081 Info hugo serve will choose a random port, watch for command output for exact port\nServe and Debug hugo serve --debug --port 8081 Build hugo ","description":"Useful hugo commands","tags":["hugo"],"title":"Hugo","uri":"/scratchpad/hugo/"},{"content":"Why? Many times I’ve to do some task on command line and I often have to search on google to find them and use them. Sometimes I end up doing a through search before I find the exact command I’m looking for. I created this list to save myself some time in future.\n","description":"","tags":null,"title":"Introduction","uri":"/introduction/"},{"content":" @RequestParam Object binding\nTo enable details in health API\nmanagement.endpoint.health.show-details=always To switch profile\nVia command line\n--spring.profiles.active=dev Via environment variable\nspring_profiles_active=dev Java heap dump\nsudo su \u003cuser running the java process\u003e jmap -dump:live,format=b,file=/tmp/\u003cfile\u003e.hprof \u003cpid\u003e Get Mime Type in Java\nhttps://www.baeldung.com/java-file-mime-type ","description":"Java or Spring quick reference and links","tags":["spring","java"],"title":"Java/Spring","uri":"/scratchpad/spring/"},{"content":"List List all items from a keystore keytool -list -noprompt -storepass \u003ckeystore password\u003e -keystore \u003cpath to keystore\u003e Example Example keytool -list -noprompt -storepass 'changeit' -keystore '/etc/pki/java/cacerts' List a particular item from a keystore keytool -list -noprompt -alias \u003calias of the item\u003e -storepass \u003ckeystore password\u003e -keystore \u003cpath to keystore\u003e Example Example keytool -list -noprompt -alias 'globalsignrootr46' -storepass 'changeit' -keystore '/etc/pki/java/cacerts' -v Import Import a trust certificate keytool -import -trustcacerts -keystore \u003cpath to keystore\u003e -storepass \u003ckeystore password\u003e -noprompt -alias \u003calias for item\u003e -file \u003ccertificate file\u003e Example Example keytool -import -trustcacerts -keystore '/etc/pki/java/cacerts' -storepass 'changeit' -noprompt -alias 'mycert' -file 'cert.pem' Import/Convert a keystore into another keytool -importkeystore -srckeystore \u003csrc\u003e.jks -destkeystore \u003cdest\u003e.p12 -deststoretype pkcs12 Create a PKCS12 bag without a private key keytool -import -file \u003ccert\u003e.crt -alias \u003calias for cert\u003e -keystore \u003cp12 cert file\u003e.p12 -storetype PKCS12 ","description":"Useful keytool commands","tags":["keytool","certificates","keys"],"title":"Keytool","uri":"/scratchpad/keytool/"},{"content":"NPM Build a project and serve it npm serve Add and Install a NPM package npm install --save \u003cpackage name\u003e NVM Install nvm Follow instructions given here\nInstall a npm version nvm install v10.24.1 Use a npm version nvm use 15.14.0 Yarn Install project dependencies yarn install Build yarn build Serve NPM project yarn serve Serve NPM project at specific port PORT=\u003cport number\u003e yarn serve Axios Print request \u0026 response on browser console Add Axios debug package\nnpm install --save axios-debug-log Add interceptors before making the API call\naxios.interceptors.request.use(request =\u003e { console.log('Starting Request', JSON.stringify(request, null, 2)) return request }) axios.interceptors.response.use(response =\u003e { console.log('Response:', JSON.stringify(response, null, 2)) return response }) axios .get(path, { withCredentials: true, headers }) .then((response) =\u003e { handleCallback(response, callback) }) .catch(fail) Webpack Define a Proxy server Check more details here\nmodule.exports = { devServer: { // Paths proxy: { '/path1': { target: 'https://example.org', changeOrigin: true }, '/path2': { target: 'https://example.org', changeOrigin: true }, '/path3': { target: 'https://example.org', changeOrigin: true, onProxyReq: function (proxyReq, req, res) { console.log(proxyReq.path) }, onProxyRes: function (proxyReq, req, res) { console.log(proxyReq.path) } } } } } ","description":"Useful NPM Snippets and commands","tags":["npm","axios","webpack","nvm","yarn"],"title":"NPM","uri":"/scratchpad/npm/"},{"content":"Fetch Server SSL certificate We need to trust a SSL certificate before we can communicate with a SSL server. To download the SSL certificate we can use following command:\nopenssl s_client -showcerts -servername \u003cserver hostname\u003e -connect \u003cserver hostname\u003e:443 \u003c/dev/null Example Example\nopenssl s_client -showcerts -servername 'google.com' -connect 'google.com:443' \u003c/dev/null Create Self Signed Root CA Certificate Create key pair for creating certificate\nopenssl genrsa -des3 -out \u003ckey file\u003e.key 2048 # or openssl ecparam -out \u003ckey file\u003e.key -name prime256v1 -genkey Create CSR\nopenssl req -new -sha256 -key \u003ckey file\u003e.key -out \u003ccsr file\u003e.csr Sign CSR\nopenssl x509 -req -sha256 -days 365 -in \u003ccsr file\u003e.csr -signkey \u003ckey file\u003e.key -out \u003ccertificate file\u003e.crt Self Signed Certificate Create key pair\nopenssl genrsa -des3 -out \u003ckey file\u003e.key 2048 # or openssl ecparam -out \u003ckey file\u003e.key -name prime256v1 -genkey Create CSR\nopenssl req -key \u003ckey file\u003e.key -new -out \u003ccsr file\u003e.csr Sign CSR\nopenssl x509 -signkey \u003ckey file\u003e.key -in \u003ccsr file\u003e.csr -req -days 365 -out \u003ccertificate file\u003e.crt Certificate from Self Signed Root CA Create key pair\nopenssl genrsa -des3 -out \u003ckey file\u003e.key 2048 # or openssl ecparam -out \u003ckey file\u003e.key -name prime256v1 -genkey Create CSR\nopenssl req -key \u003ckey file\u003e.key -new -out \u003ccsr file\u003e.csr Sign CSR\nopenssl x509 -req -in \u003ccsr file\u003e.csr -CA \u003cca certificate file\u003e.crt -CAkey \u003cca key file\u003e.key -CAcreateserial -out \u003ccertificate file\u003e.crt -days 365 -sha256 Certificate with Subject Alternate Name Create a conf file\n[req] default_bits = 2048 prompt = no default_md = sha256 x509_extensions = v3_req req_extensions = v3_req distinguished_name = dn [dn] C = Country ST = State L = Example Location O = Example Org OU = Example Org Unit CN = example.com [v3_req] subjectAltName = @alt_names keyUsage = critical, digitalSignature, nonRepudiation extendedKeyUsage = 2.16.840.1.114027.40.11, 1.3.6.1.4.1.311.10.3.12 # 2.16.840.1.114027.40.11 is Entrust Technologies oid # 1.3.6.1.4.1.311.10.3.12 is Identified Private Org oid [alt_names] DNS.1 = *.example.com IP.1 = 10.10.10.100 Tip Add more DNS names or IPs to the config file as per your requirement, just increment the number in DNS.\u003cnum\u003e All these entries will be added to SubjectAltNames extension Check here for more fields in conf file Create Self Signed Cert using above config\nopenssl req -new -x509 -newkey rsa:2048 -sha256 -nodes -keyout \u003ckey file\u003e.key -days 3560 -out \u003ccertificate file\u003e.pem -config \u003cpath to config file\u003e.cnf Note Above command will create a new key Fields for CSR will be taken from the conf file View or Print Certificate openssl x509 -text -noout -in \u003ccertificate file\u003e.crt CSR openssl req -in \u003ccsr file\u003e.csr -text -noout P12 openssl pkcs12 -info -in \u003cp12 file\u003e.(p12|pfx) Convert PEM certificate to DER/CRT format openssl x509 -in \u003ccertificate file\u003e.pem -outform der -out \u003ccertificate file\u003e.(crt|der) DER certificate to PEM format openssl x509 -inform der -in \u003ccertificate file\u003e.cer -outform pem -out \u003ccertificate file\u003e.pem CRT certificate to PEM format openssl x509 -in \u003ccertificate file\u003e.crt -outform pem -out \u003ccertificate file\u003e.pem PEM certificate and key to PKCS12/P12/PFX bag openssl pkcs12 -inkey \u003ckey file\u003e.key -in \u003ccertificate file\u003e.crt -export -out \u003cpkcs12 file\u003e.(p12|pfx) -name \u003calias or key name\u003e ","description":"Openssl commands: fetch server certificate, create self signed certificates, print certificate/csr details, convert certificates into different formats and more","tags":["openssl","certificates","key","pem","der","p12","pfx"],"title":"Openssl","uri":"/scratchpad/openssl/"},{"content":"Generate SSh key ssh-keygen -t \u003ctype\u003e -C \u003ccomment\u003e Example ssh-keygen -t ed25519 -C \"john@users.noreply.github.com\" # or ssh-keygen -t rsa -C \"My key name\" Copy my public key ssh-copy-id -i \u003cpath to key file\u003e \u003cuser\u003e@\u003chostname or ip\u003e Example ssh-copy-id -i ~/.ssh/id_rsa john@10.10.10.1 # or ssh-copy-id -i ~/.ssh/id_rsa john@mydomainname.tld Login ssh \u003cuser\u003e@\u003chostname or ip\u003e Example ssh john@10.10.10.1 # or ssh john@mydomainname.tld ","description":"Useful ssh commands","tags":["ssh","ssh-keygen","ssh-copy-id"],"title":"SSH","uri":"/scratchpad/ssh/"},{"content":"Show Hidden files on macOS defaults write com.apple.Finder AppleShowAllFiles true killall Finder ","description":"Commands to setup a new system","tags":["hidden files"],"title":"System Setup","uri":"/scratchpad/systemsetup/"},{"content":" Ansible cURL Database Git Gradle Hugo Java/Spring Keytool NPM Openssl SSH System Setup Miscellaneous ","description":"","tags":null,"title":"Scratch Pad","uri":"/scratchpad/"},{"content":"Monitor ipv4 address for a hostname using macOS DNS resolver dns-sd -G v4 \u003chostname\u003e Ping a host given number of times ping -c \u003cnumber\u003e \u003chostname\u003e Query IP address of a hostname nslookup \u003chostname\u003e Query IP address of a hostname from a specific DNS server nslookup \u003chostname\u003e \u003cdns server address\u003e Example nslookup google.com 8.8.8.8 Query specific field from DNS server nslookup -query=\u003cfield name\u003e \u003chostname\u003e Example nslookup -query=cname google.com 8.8.8.8 Find open ports Linux netstat -plant macOS Using netstat\nnetstat -an -p\u003cprotocol\u003e Example netstat -an -ptcp # or netstat -an -pudp Using lsof\nlsof -i Sync/Copy items with a progress bar rsync -azP --delete --exclude=\"unwanted-*\" \u003csource\u003e/ \u003cdestination\u003e/ # or rsync -azP --delete --exclude=\"more-unwanted-*\" \u003cuser\u003e@\u003cip address\u003e:\u003csource\u003e/ \u003cdestination\u003e/ Note Note the / at the end of source and destination, this indicates that the content of that directory is to be synced. If there is not / at end then rsync will create the source directory under destination --delete will make sure any file deleted in source is also deleted in destination, by default rsync doesn’t delete the deleted files Example Following command will create a dir directory under pwd rsync -azP /path/to/dir . Following command will copy contents of dir to pwd rsync -azP /path/to/dir ./ Mount nfs filesystem # List all the shares showmount -e \u003chostname or ip\u003e # mount a share sudo mount -t nfs -o resvport,rw \u003chostname or ip\u003e:\u003cPath to share\u003e \u003cPath to mount\u003e ","description":"Miscellaneous useful commands","tags":["dns-sd","ping","nslookup","netstat","rsync"],"title":"Miscellaneous","uri":"/scratchpad/miscellaneous/"},{"content":"","description":"","tags":null,"title":"Ansible","uri":"/tags/ansible/"},{"content":"","description":"","tags":null,"title":"Ansible-Galaxy","uri":"/tags/ansible-galaxy/"},{"content":"","description":"","tags":null,"title":"Ansible-Playbook","uri":"/tags/ansible-playbook/"},{"content":"","description":"","tags":null,"title":"Axios","uri":"/tags/axios/"},{"content":"","description":"","tags":null,"title":"Categories","uri":"/categories/"},{"content":"","description":"","tags":null,"title":"Certificates","uri":"/tags/certificates/"},{"content":"","description":"","tags":null,"title":"Curl","uri":"/tags/curl/"},{"content":"","description":"","tags":null,"title":"Der","uri":"/tags/der/"},{"content":"","description":"","tags":null,"title":"Dns-Sd","uri":"/tags/dns-sd/"},{"content":"","description":"","tags":null,"title":"Doh","uri":"/tags/doh/"},{"content":"","description":"","tags":null,"title":"Git","uri":"/tags/git/"},{"content":"","description":"","tags":null,"title":"Gradle","uri":"/tags/gradle/"},{"content":"","description":"","tags":null,"title":"Hidden Files","uri":"/tags/hidden-files/"},{"content":"","description":"","tags":null,"title":"Hugo","uri":"/tags/hugo/"},{"content":"","description":"","tags":null,"title":"Java","uri":"/tags/java/"},{"content":"","description":"","tags":null,"title":"Key","uri":"/tags/key/"},{"content":"","description":"","tags":null,"title":"Keys","uri":"/tags/keys/"},{"content":"","description":"","tags":null,"title":"Keytool","uri":"/tags/keytool/"},{"content":"","description":"","tags":null,"title":"Mariadb","uri":"/tags/mariadb/"},{"content":"","description":"","tags":null,"title":"Mongo","uri":"/tags/mongo/"},{"content":"","description":"","tags":null,"title":"Mysql","uri":"/tags/mysql/"},{"content":"","description":"","tags":null,"title":"Netstat","uri":"/tags/netstat/"},{"content":"","description":"","tags":null,"title":"Npm","uri":"/tags/npm/"},{"content":"","description":"","tags":null,"title":"Nslookup","uri":"/tags/nslookup/"},{"content":"","description":"","tags":null,"title":"Nvm","uri":"/tags/nvm/"},{"content":"","description":"","tags":null,"title":"Openssl","uri":"/tags/openssl/"},{"content":"","description":"","tags":null,"title":"P12","uri":"/tags/p12/"},{"content":"","description":"","tags":null,"title":"Pem","uri":"/tags/pem/"},{"content":"","description":"","tags":null,"title":"Pfx","uri":"/tags/pfx/"},{"content":"","description":"","tags":null,"title":"Ping","uri":"/tags/ping/"},{"content":"","description":"","tags":null,"title":"Rsync","uri":"/tags/rsync/"},{"content":"","description":"","tags":null,"title":"Sops","uri":"/tags/sops/"},{"content":"","description":"","tags":null,"title":"Spring","uri":"/tags/spring/"},{"content":"","description":"","tags":null,"title":"Ssh","uri":"/tags/ssh/"},{"content":"","description":"","tags":null,"title":"Ssh-Copy-Id","uri":"/tags/ssh-copy-id/"},{"content":"","description":"","tags":null,"title":"Ssh-Keygen","uri":"/tags/ssh-keygen/"},{"content":"","description":"","tags":null,"title":"Tags","uri":"/tags/"},{"content":"","description":"","tags":null,"title":"Webpack","uri":"/tags/webpack/"},{"content":"","description":"","tags":null,"title":"Yarn","uri":"/tags/yarn/"}]